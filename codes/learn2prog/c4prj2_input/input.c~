#include <assert.h>
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include "deck.h"
#include "cards.h"
#include "future.h"
#include "input.h"

#define IN 1
#define OUT 0
#define STR_CARD_LENGTH 2 /* length of a string representation of a card */

static int check_card_type(char value, char suit);
static int is_valid_value(char value);
static int is_valid_suit(char suit);
static void free_at_reading(size_t n_hands, future_cards_t *fc, deck_t **decks,
                            FILE *f);


/* The string must be null- and newline-terminated. Unknown card has the form
   ?<digit> and <digit> must be a number between 0 and 9 (inclusive)
   return:
   1. a pointer to a hand if parsed successful
   2. NULL is any error while parsing (memory is freed) */
deck_t *hand_from_string(const char *str, future_cards_t *fc) {
  deck_t * hand = malloc(sizeof(*hand));
  hand->cards = NULL;
  hand->n_cards = 0;

  int state = OUT;
  int token_length = 0;
  char token[STR_CARD_LENGTH] = {0};
  for (size_t i = 0; i < strlen(str); ++i) {
    char c = str[i];
    if (!isspace(c)) {
      if (token_length < STR_CARD_LENGTH) {
	token[token_length++] = c;
      }
      else {
	fprintf(stderr, "card has the form: <value><suit>\n");
	free_deck(hand);
	return NULL;
      } /* error: the card string is incorrect */
      state = IN;
    }
    else if (state == IN) {
      if (token_length < STR_CARD_LENGTH) {
	fprintf(stderr, "card has the form: <value><suit>\n");
	free_deck(hand);
	return NULL;	
      }
      char value = token[0];
      char suit = token[1];
      int card_type = check_card_type(value, suit);
      if (card_type == 1) {
	card_t card = card_from_letters(value, suit);
	add_card_to(hand, card);
      } /* regular card */
      else if (card_type == -1) {
	card_t * ptr = add_empty_card(hand);
	size_t index = suit - '0';
	add_future_card(fc, index, ptr);
      } /* unknown card */
      else {
	fprintf(stderr, "card has the form: <value><suit>\n");
	free_deck(hand);
	return NULL;
      }
      token_length = 0;
      state = OUT;      
    }
  }

  return hand;
}

/* Though I hate aborting in a function except in main, it is the
   requirement anyway. If any error while parsing or cards is less that 5,
   clean all memory, close the file and abort
   if success, return decks (seems the file is handled by client ) */
deck_t **read_input(FILE *f, size_t *n_hands, future_cards_t *fc) {
  assert(*n_hands == 0);
  deck_t ** hands = NULL;

  char * line = NULL;
  size_t n = 0;
  while (getline(&line, &n, f) > 0) {
    /*check if newline terminated */
    size_t length = strlen(line);
    if (line[length-1] != '\n') {
      /* clean memory */
      free_at_reading(*n_hands, fc, hands, f);
      free(line);
      fprintf(stderr, "line is not newline terminated\n");
      exit(EXIT_FAILURE);
    }

    deck_t *hand = hand_from_string(line, fc);
    if (!hand || hand->n_cards < 5) {
      /* clean memory */
      free_at_reading(*n_hands, fc, hands, f);
      free(line);
      fprintf(stderr, "incorrect hand\n");
      exit(EXIT_FAILURE);
    }

    hands = realloc(hands, (*n_hands + 1) * sizeof(*hands));
    hands[*n_hands] = hand;
    ++(*n_hands);
  }
  free(line);
  return hands;
}

/* local functions */

/* return 1 if a regular known card
   return -1 if value is '?' and suit is a digit
   return 0, otherwise */
static int check_card_type(char value, char suit) {
  /* regular known card */
  if (is_valid_value(value) && is_valid_suit(suit))
    return 1;

  /* unknown card */
  if (value == '?' && isdigit(suit))
    return -1;
  
  return 0;
}

/* if value is a valid card value, i.e. character
   2, ..., 9, 0, J, Q, K, A, return 1
   otherwise return 0*/
static int is_valid_value(char value) {
  if (value >= '2' && value <= '9')
    return 1;
  if (value == '0')
    return 1;
  if (value == 'A')
    return 1;
  if (value == 'K')
    return 1;
  if (value == 'Q')
    return 1;
  if (value == 'J')
    return 1;

  return 0;
}

static int is_valid_suit(char suit) {
  if (suit == 's')
    return 1;
  if (suit == 'h')
    return 1;
  if (suit == 'd')
    return 1;
  if (suit == 'c')
    return 1;
  
  return 0;
}

static void free_at_reading(size_t n_hands, future_cards_t *fc, deck_t **hands,
                            FILE *f) {
  for (size_t i = 0; i < n_hands; ++i) {
    free_deck(hands[i]);
  }
  free(hands);

  if (!fc) {
    if (fclose(f)) {
      fprintf(stderr, "Fail to close file\n");    
    }
    return;
  }
  for (size_t i = 0; i < fc->n_decks; ++i) {
    free(fc->decks[i].cards);
  }
  free(fc->decks);
  free(fc);
  if (fclose(f)) {
    fprintf(stderr, "Fail to close file\n");    
  }
}
